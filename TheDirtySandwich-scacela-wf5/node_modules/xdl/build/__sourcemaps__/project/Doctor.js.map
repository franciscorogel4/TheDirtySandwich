{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","Watchman","isPlatformSupported","ProjectUtils","clearNotification","let","watchmanVersion","await","unblockAndGetVersionAsync","semver","lt","MIN_WATCHMAN_VERSION","warningMessage","process","platform","logWarning","_checkWatchmanVersionAsync","exp","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","Promise","all","map","fieldPath","schema","meta","asset","contentTypePattern","contentTypeHuman","value","_","get","filePath","path","resolve","contentType","fs","existsSync","fileType","readChunk","mime","request","promise","head","url","headers","match","RegExp","configName","configFilenameAsync","Config","helpUrl","e","message","_validateAssetFieldsAsync","pkg","FATAL","expJsonExists","fileExistsAsync","join","appJsonExists","WARNING","getSchemaAsync","validator","jsonschema","Validator","validationResult","validate","errors","length","fullMessage","error","stack","replace","dependencies","sdkVersions","Api","sdkVersionsAsync","keys","validation","reactNativeVersionWarnings","reactNative","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","NO_ISSUES","_validatePackageJsonAndExpJsonAsync","readConfigJsonAsync","nodeModulesPath","result","statSync","isDirectory","logError","isFile","Binaries","sourceBashLoginScriptsAsync","spawnAsync","npmls","npmlsCommand","cwd","stdout","npmlsDependencies","JSON","parse","errorStrings","forEach","versionRequired","dependency","installedDependency","version","peerMissing","push","satisfies","includes","from","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","allowNetwork","status","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","readFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus"],"mappings":";;;;;;;;+BA8BAA,WAA0CC,WAA1CD,EAAuD;AACrD;AACA,QAAI,CAACE,gCAASC,mBAATD,EAAL,EAAqC;AACnCE,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,yBAA5CA;AACA;AACF;;AAEAE,QAAIC,kBAAkBC,MAAMN,gCAASO,yBAATP,CAAmCD,WAAnCC,CAA5BI;;AAEA;AACA,QAAI,CAACC,eAAL,EAAsB;AACpB;AACAH,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,yBAA5CA;AACA;AACF;;AAEA,QAAIM,oCAAOC,EAAPD,CAAUH,eAAVG,EAA2BE,oBAA3BF,CAAJ,EAAsD;AACpDJ,UAAIO,iBAAkB,uDAAsDN,eAAgB,gMAA+LK,oBAAqB,GAAhTN;;AAEA;AACA,UAAIQ,QAAQC,QAARD,KAAqB,QAAzB,EAAmC;AACjCD,0BAAmB,qFAAnBA;AACF;AACAT,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGES,cAHFT,EAIE,yBAJFA;AAMF,KAbA,MAaO;AACLA,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,yBAA5CA;AACF;AACF,G;;kBAhCea,0B;;;;;;gCAkCfjB,WAAyCC,WAAzCD,EAAsDkB,GAAtDlB,EAA2D;AACzD,QAAI;AACF,YAAMmB,eAAeX,MAAMY,kCAAUC,oBAAVD,CAA+BF,IAAII,UAAnCF,CAA3B;AACAZ,YAAMe,QAAQC,GAARD,CACJJ,aAAaM,GAAbN;AAAAA,sCAAiBnB,WAAO;AACtB0B,mBADsB;AAEtBC,kBAAQ,EAAEC,MAAM,EAAEC,KAAF,EAASC,kBAAT,EAA6BC,gBAA7B,EAAR;AAFc,SAAP/B,EAGX;AACJ,gBAAMgC,QAAQC,oCAAEC,GAAFD,CAAMf,GAANe,EAAWP,SAAXO,CAAd;AACA,cAAIJ,SAASG,KAAb,EAAoB;AAClB,gBAAIF,kBAAJ,EAAwB;AACtB;AACA;AACA;AACA,oBAAMK,WAAWC,cAAKC,OAALD,CAAanC,WAAbmC,EAA0BJ,KAA1BI,CAAjB;AACA,oBAAME,cAAcC,YAAGC,UAAHD,CAAcJ,QAAdI,IAChBE,8CAASjC,MAAMkC,+CAAUP,QAAVO,EAAoB,CAApBA,EAAuB,IAAvBA,CAAfD,GAA6CE,IAD7BJ,GAEhB,CAAC/B,MAAMoC,sCAAQC,OAARD,CAAgBE,IAAhBF,CAAqB,EAAEG,KAAKf,KAAP,EAArBY,CAAP,EAA6CI,OAA7C,CACE,cADF,CAFJ;AAKA,kBAAI,CAACV,YAAYW,KAAZX,CAAkB,IAAIY,MAAJ,CAAWpB,kBAAX,CAAlBQ,CAAL,EAAwD;AACtD,sBAAMa,aAAa3C,MAAMJ,wCAAagD,mBAAbhD,CACvBH,WADuBG,CAAzB;AAGAA,wDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,uBAAsB+C,UAAW,YAAWzB,SAAU,uBAAsBK,gBAAiB,sBAAqBC,KAAM,eAAcM,WAAY,UAASe,oCAAOC,OAAQ,EAH7KlD,EAIG,gCAA+BsB,SAAU,EAJ5CtB;AAMF,eAVA,MAUO;AACLA,wDAAaC,iBAAbD,CACEH,WADFG,EAEG,gCAA+BsB,SAAU,EAF5CtB;AAIF;AACF;AACF;AACD,SAlCDe;;AAAAA;AAAAA;AAAAA;AAAAA,WADII,CAANf;;AAsCAJ,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,8BAA5CA;AACF,KAzCA,CAyCE,OAAOmD,CAAP,EAAU;AACVnD,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,OAFFA,EAGG,6CAA4CmD,EAAEC,OAAQ,GAHzDpD,EAIE,8BAJFA;AAMF;AACF,G;;kBAlDeqD,yB;;;;;;gCAoDfzD,WACEkB,GADFlB,EAEE0D,GAFF1D,EAGEC,WAHFD,EAImB;AACjB,QAAI,CAACkB,GAAD,IAAQ,CAACwC,GAAb,EAAkB;AAChB;AACA,aAAOC,KAAP;AACF;;AAEA,QAAI;AACFnD,YAAMS,2BAA2BhB,WAA3BgB,CAANT;AACF,KAFA,CAEE,OAAO+C,CAAP,EAAU;AACVnD,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,+CAA8CmD,EAAEC,OAAQ,GAH3DpD,EAIE,0CAJFA;AAMF;AACAA,4CAAaC,iBAAbD,CACEH,WADFG,EAEE,0CAFFA;;AAKA,UAAMwD,gBAAgBpD,MAAMJ,wCAAayD,eAAbzD,CAC1BgC,cAAK0B,IAAL1B,CAAUnC,WAAVmC,EAAuB,UAAvBA,CAD0BhC,CAA5B;AAGA,UAAM2D,gBAAgBvD,MAAMJ,wCAAayD,eAAbzD,CAC1BgC,cAAK0B,IAAL1B,CAAUnC,WAAVmC,EAAuB,UAAvBA,CAD0BhC,CAA5B;;AAIA,QAAIwD,iBAAiBG,aAArB,EAAoC;AAClC3D,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,0GAHHA,EAIE,8BAJFA;AAMA,aAAO4D,OAAP;AACF;AACA5D,4CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,8BAA5CA;;AAEAE,QAAIgB,aAAaJ,IAAII,UAArBhB;AACA,UAAM6C,aAAa3C,MAAMJ,wCAAagD,mBAAbhD,CAAiCH,WAAjCG,CAAzB;AACA,QAAI;AACF;AACAE,UAAIqB,SAASnB,MAAMY,kCAAU6C,cAAV7C,CAAyBE,UAAzBF,CAAnBd;AACAA,UAAI4D,YAAY,IAAIC,4CAAWC,SAAf,EAAhB9D;AACAA,UAAI+D,mBAAmBH,UAAUI,QAAVJ,CAAmBhD,GAAnBgD,EAAwBvC,MAAxBuC,CAAvB5D;AACA,UAAI+D,iBAAiBE,MAAjBF,IAA2BA,iBAAiBE,MAAjBF,CAAwBG,MAAxBH,GAAiC,CAAhE,EAAmE;AACjE/D,YAAImE,cAAe,mBAAkBJ,iBAAiBE,MAAjBF,CAAwBG,MAAxBH,GAAiC,CAAjCA,GAAqC,GAArCA,GAA2C,EAAG,OAAMlB,UAAW,wCAAuC7B,UAAW,6BAAtJhB;;AAEA,aAAKA,IAAIoE,KAAT,IAAkBL,iBAAiBE,MAAnC,EAA2C;AACzC;AACAjE,cAAIkD,UAAUkB,MAAMC,KAAND,CACXE,OADWF,CACH,aADGA,EACY,EADZA,EAEXE,OAFWF,CAEH,qBAFGA,EAEqB,aAAYvB,UAAW,EAF5CuB,EAGXE,OAHWF,CAGH,6BAHGA,EAG4B,qBAH5BA,CAAdpE;AAIAmE,yBAAgB,SAAQjB,OAAQ,GAAhCiB;AACF;;AAEArE,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGEqE,WAHFrE,EAIE,0BAJFA;AAMA,eAAO4D,OAAP;AACF,OAnBA,MAmBO;AACL5D,gDAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,0BAA5CA;AACF;;AAEAA,8CAAaC,iBAAbD,CACEH,WADFG,EAEE,oCAFFA;AAIF,KAhCA,CAgCE,OAAOmD,CAAP,EAAU;AACVnD,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,+BAA8B+C,UAAW,KAAII,EAAEC,OAAQ,GAH1DpD,EAIE,oCAJFA;AAMF;;AAEA;AACA,QAAIkB,eAAe,aAAnB,EAAkC;AAChClB,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,mFAAkF+C,UAAW,EAHhG/C,EAIE,oBAJFA;AAMA,aAAO4D,OAAP;AACF;AACA5D,4CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,oBAA5CA;;AAEA;AACA,QAAI,CAACsD,IAAImB,YAAL,IAAqB,CAACnB,IAAImB,YAAJnB,CAAiB,cAAjBA,CAA1B,EAA4D;AAC1DtD,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,+DAHHA,EAIE,wCAJFA;AAMA,aAAO4D,OAAP;AACF;AACA5D,4CAAaC,iBAAbD,CACEH,WADFG,EAEE,wCAFFA;;AAKA;AACAE,QAAIwE,cAActE,MAAMuE,8BAAIC,gBAAJD,EAAxBzE;AACA,QAAI,CAACwE,WAAL,EAAkB;AAChB1E,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,kDAHHA,EAIE,iCAJFA;AAMA,aAAO4D,OAAP;AACF;AACA5D,4CAAaC,iBAAbD,CACEH,WADFG,EAEE,iCAFFA;;AAKA,QAAI,CAAC0E,YAAYxD,UAAZwD,CAAL,EAA8B;AAC5B1E,8CAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,kDAAiD6B,oCAAEgD,IAAFhD,CAAO6C,WAAP7C,EAAoB6B,IAApB7B,CAAyB,IAAzBA,CAA+B,EAHnF7B,EAIE,4BAJFA;AAMA,aAAO4D,OAAP;AACF;AACA5D,4CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,4BAA5CA;;AAEA,QAAIiD,oCAAO6B,UAAP7B,CAAkB8B,0BAAtB,EAAkD;AAChD7E,UAAI8E,cAAc1B,IAAImB,YAAJnB,CAAiB,cAAjBA,CAAlBpD;;AAEA;AACA;AACA,UAAI,CAAC8E,YAAYnC,KAAZmC,CAAkB,sCAAlBA,CAAL,EAAgE;AAC9DhF,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,yDAAwDiD,oCAAOC,OAAQ,GAH1ElD,EAIE,4BAJFA;AAMA,eAAO4D,OAAP;AACF;AACA5D,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,4BAA5CA;;AAEA,UAAI;AACFE,YAAI+E,iBAAiBD,YAAYnC,KAAZmC,CAAkB,mBAAlBA,EAAuC,CAAvCA,CAArB9E;AACAA,YAAIgF,mBAAmBR,YAAYxD,UAAZwD,CAAvBxE;;AAEA;AACA,YACEI,oCAAO6E,KAAP7E,CAAa8E,gCAASC,sBAATD,CAAgCH,cAAhCG,CAAb9E,MACAA,oCAAO6E,KAAP7E,CACE8E,gCAASC,sBAATD,CACEF,iBAAiB,oBAAjBA,CADFE,CADF9E,CAFF,EAOE;AACAN,kDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,2DAA0DkB,UAAW,sCAAqCgE,iBAAiB,oBAAjBA,CAAuC,EAHpJlF,EAIE,wCAJFA;AAMA,iBAAO4D,OAAP;AACF;AACA5D,gDAAaC,iBAAbD,CACEH,WADFG,EAEE,wCAFFA;;AAKAA,gDAAaC,iBAAbD,CACEH,WADFG,EAEE,0CAFFA;AAIF,OA9BA,CA8BE,OAAOmD,CAAP,EAAU;AACVnD,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,YAAWgF,WAAY,0GAH1BhF,EAIE,0CAJFA;AAMA,eAAO4D,OAAP;AACF;AACF;;AAEA;;AAEA,WAAO0B,SAAP;AACF,G;;kBAxMeC,mC;;;;;AA0Mf;;;;gCACA3F,WAAyCC,WAAzCD,EAAuE;AACrEM,QAAI,EAAEY,GAAF,EAAOwC,GAAP,KAAelD,MAAMJ,wCAAawF,mBAAbxF,CAAiCH,WAAjCG,CAAzBE;AACAA,QAAIuF,kBAAkB5F,WAAtBK;AACA,QAAIY,IAAI2E,eAAR,EAAyB;AACvBA,wBAAkBzD,cAAK0B,IAAL1B,CAAUnC,WAAVmC,EAAuBlB,IAAI2E,eAA3BzD,CAAlByD;AACF;;AAEA;AACA,QAAI;AACFvF,UAAIwF,SAASvD,YAAGwD,QAAHxD,CAAYH,cAAK0B,IAAL1B,CAAUyD,eAAVzD,EAA2B,cAA3BA,CAAZG,CAAbjC;AACA,UAAI,CAACwF,OAAOE,WAAPF,EAAL,EAA2B;AACzB1F,gDAAa6F,QAAb7F,CACEH,WADFG,EAEE,MAFFA,EAGG,iGAHHA,EAIE,6BAJFA;AAMA,eAAOuD,KAAP;AACF;;AAEAvD,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,6BAA5CA;AACF,KAbA,CAaE,OAAOmD,CAAP,EAAU;AACVnD,8CAAa6F,QAAb7F,CACEH,WADFG,EAEE,MAFFA,EAGG,iGAHHA,EAIE,6BAJFA;AAMA,aAAOuD,KAAP;AACF;;AAEA;AACA,QAAI;AACFrD,UAAIwF,SAASvD,YAAGwD,QAAHxD,CACXH,cAAK0B,IAAL1B,CACEyD,eADFzD,EAEE,cAFFA,EAGE,cAHFA,EAIE,WAJFA,EAKE,QALFA,CADWG,CAAbjC;AASA,UAAI,CAACwF,OAAOI,MAAPJ,EAAL,EAAsB;AACpB1F,gDAAa6F,QAAb7F,CACEH,WADFG,EAEE,MAFFA,EAGG,6FAHHA,EAIE,mCAJFA;AAMA,eAAOuD,KAAP;AACF;;AAEAvD,8CAAaC,iBAAbD,CACEH,WADFG,EAEE,mCAFFA;AAIF,KAxBA,CAwBE,OAAOmD,CAAP,EAAU;AACVnD,8CAAa6F,QAAb7F,CACEH,WADFG,EAEE,MAFFA,EAGG,6FAHHA,EAIE,mCAJFA;AAMA,aAAOuD,KAAP;AACF;;AAEA;AACA,QAAID,IAAImB,YAAR,EAAsB;AACpBrE,YAAM2F,gCAASC,2BAATD,EAAN3F;;AAEA,UAAI;AACFA,cAAM6F,iDAAW,KAAXA,EAAkB,CAAC,WAAD,CAAlBA,CAAN7F;AACF,OAFA,CAEE,OAAO+C,CAAP,EAAU;AACVnD,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,qGAHHA,EAIE,sBAJFA;AAMA,eAAO4D,OAAP;AACF;AACA5D,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,sBAA5CA;;AAEAE,UAAIgG,KAAJhG;AACA,UAAI;AACFA,YAAIiG,eAAe/F,MAAM6F,iDACvB,KADuBA,EAEvB,CAAC,IAAD,EAAO,QAAP,EAAiB,SAAjB,EAA4B,GAA5B,CAFuBA,EAGvB;AACEG,eAAKX;AADP,SAHuBQ,CAAzB/F;AAOAgG,gBAAQC,aAAaE,MAArBH;AACF,OATA,CASE,OAAO/C,CAAP,EAAU;AACV+C,gBAAQ/C,EAAEkD,MAAVH,CADU,CACM;AAClB;;AAEA,UAAI,CAACA,KAAL,EAAY;AACVlG,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,2EAA0EH,WAAY,GAHzFG,EAIE,6BAJFA;AAMA,eAAO4D,OAAP;AACF;AACA5D,8CAAaC,iBAAbD,CAA+BH,WAA/BG,EAA4C,6BAA5CA;;AAEAE,UAAIoG,iBAAJpG;AACA,UAAI;AACFoG,4BAAoBC,KAAKC,KAALD,CAAWL,KAAXK,EAAkB9B,YAAtC6B;AACF,OAFA,CAEE,OAAOnD,CAAP,EAAU;AACVnD,gDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGG,+CAA8CmD,EAAEC,OAAQ,EAH3DpD,EAIE,sCAJFA;AAMA,eAAO4D,OAAP;AACF;AACA5D,8CAAaC,iBAAbD,CACEH,WADFG,EAEE,sCAFFA;;AAKA,UAAIsG,iBAAJ,EAAuB;AACrBpG,YAAIuG,eAAe,EAAnBvG;AACA2B,4CAAE6E,OAAF7E,CAAUyB,IAAImB,YAAd5C,EAA4B,UAAC8E,eAAD,EAAkBC,UAAlB,EAAiC;AAC3D1G,cAAI2G,sBAAsBP,kBAAkBM,UAAlBN,CAA1BpG;AACA,cAAI0G,eAAe,OAAfA,IAA0BD,gBAAgB9D,KAAhB8D,CAAsB,OAAtBA,CAA9B,EAA8D;AAC5D;AACF,WAFA,MAEO,IAAI,CAACE,mBAAD,IAAwB,CAACA,oBAAoBC,OAAjD,EAA0D;AAC/D,gBAAID,uBAAuBA,oBAAoBE,WAA/C,EAA4D;AAC1DN,2BAAaO,IAAbP,CACG,aAAYG,UAAW,gDAA+CnB,eAAgB,uBADzFgB;AAGF,aAJA,MAIO;AACLA,2BAAaO,IAAbP,CACG,aAAYG,UAAW,gCAD1BH;AAGF;AACF,WAVO,MAUA,IACLG,eAAe,cAAfA,IACA,CAACtG,oCAAO2G,SAAP3G,CAAiBuG,oBAAoBC,OAArCxG,EAA8CqG,eAA9CrG,CADDsG,IAEA,CAACD,gBAAgBO,QAAhBP,CAAyBE,oBAAoBM,IAA7CR,CAHI,EAIL;AACA;AACA;AACA;AACAF,yBAAaO,IAAbP,CACG,8BAA6BI,oBAAoBC,OAAQ,QAAOF,UAAW,uCAAsCD,eAAgB,EADpIF;AAGF;AACD,SA1BD5E;;AA4BA,YAAI4E,aAAarC,MAAbqC,GAAsB,CAA1B,EAA6B;AAC3BA,uBAAaO,IAAbP,CACG,8EAA6EhB,eAAgB,eADhGgB;AAGAzG,kDAAaY,UAAbZ,CACEH,WADFG,EAEE,MAFFA,EAGEyG,aAAa/C,IAAb+C,CAAkB,IAAlBA,CAHFzG,EAIE,4BAJFA;AAMA,iBAAO4D,OAAP;AACF,SAXA,MAWO;AACL5D,kDAAaC,iBAAbD,CACEH,WADFG,EAEE,4BAFFA;AAIF;AACF;AACF;;AAEA,WAAOsF,SAAP;AACF,G;;kBAhLe8B,yB;;;;;;gCAkLRxH,WACLC,WADKD,EAEY;AACjB,WAAOyH,cAAcxH,WAAdwH,EAA2B,KAA3BA,CAAP;AACF,G;;kBAJsBC,uB;;;;;;gCAMf1H,WACLC,WADKD,EAEY;AACjB,WAAOyH,cAAcxH,WAAdwH,EAA2B,IAA3BA,CAAP;AACF,G;;kBAJsBE,wB;;;;;;gCAMtB3H,WACEC,WADFD,EAEE4H,YAFF5H,EAGmB;AACjBM,QAAI,EAAEY,GAAF,EAAOwC,GAAP,KAAelD,MAAMJ,wCAAawF,mBAAbxF,CAAiCH,WAAjCG,CAAzBE;AACAA,QAAIuH,SAASrH,MAAMmF,oCAAoCzE,GAApCyE,EAAyCjC,GAAzCiC,EAA8C1F,WAA9C0F,CAAnBrF;;AAEA;AACA,QAAIsH,YAAJ,EAAkB;AAChBnE,gCAA0BxD,WAA1BwD,EAAuCvC,GAAvCuC;AACF;;AAEA;AACA;AACA,QAAIoE,WAAWlE,KAAXkE,IAAoB3G,GAApB2G,IAA2B,CAAC3G,IAAI4G,2BAApC,EAAiE;AAC/DxH,UAAIyH,oBAAoBvH,MAAMgH,0BAA0BvH,WAA1BuH,CAA9BlH;AACA,UAAIyH,oBAAoBF,MAAxB,EAAgC;AAC9B,eAAOE,iBAAP;AACF;AACF;;AAEA,WAAOF,MAAP;AACF,G;;kBAtBeJ,a;;;;;;gCA4BRzH,WAAgCC,WAAhCD,EAAsE;AAC3EM,QAAI,EAAEoD,GAAF,KAAUlD,MAAMJ,wCAAawF,mBAAbxF,CAAiCH,WAAjCG,CAApBE;;AAEA,QAAI;AACFA,UAAI0H,MAAJ1H;AACA,UAAIoD,IAAImB,YAAJnB,CAAiB,UAAjBA,CAAJ,EAAkC;AAChCsE,iBAAS,UAATA;AACF,OAFA,MAEO,IAAItE,IAAImB,YAAJnB,CAAiB,MAAjBA,CAAJ,EAA8B;AACnCsE,iBAAS,MAATA;AACF,OAFO,MAEA;AACL,eAAOC,sBAAP;AACF;;AAEA3H,UAAI4H,eAAe9F,cAAK0B,IAAL1B,CAAUnC,WAAVmC,EAAuBsB,IAAIyE,IAA3B/F,CAAnB9B;AACAA,UAAI8H,WAAW5H,MAAM+B,YAAG8F,QAAH9F,CAAYM,OAAZN,CAAoB2F,YAApB3F,EAAkC,MAAlCA,CAArBjC;;AAEA;AACA,UACE8H,SAASd,QAATc,CAAmB,SAAQJ,MAAO,GAAlCI,KACAA,SAASd,QAATc,CAAmB,YAAWJ,MAAO,IAArCI,CAFF,EAGE;AACA,eAAOE,+BAAP;AACF,OALA,MAKO;AACL,eAAOC,qBAAP;AACF;AACF,KAtBA,CAsBE,OAAOhF,CAAP,EAAU;AACV,aAAOgF,qBAAP;AACF;AACF,G;;kBA5BsBC,gB;;;;;AArhBtB;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEO,MAAM9C,gCAAY,CAAlB;AACA,MAAM1B,4BAAU,CAAhB;AACA,MAAML,wBAAQ,CAAd;;AAEP,MAAM/C,uBAAuB,OAA7B;;AAyfO,MAAM0H,4EAAkC,CAAxC;AACA,MAAML,0DAAyB,CAA/B;AACA,MAAMM,wDAAwB,CAA9B","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs';\nimport jsonschema from 'jsonschema';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@exponent/spawn-async';\nimport readChunk from 'read-chunk';\nimport fileType from 'file-type';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const FATAL = 2;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      warningMessage,\n      'doctor-watchman-version'\n    );\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nasync function _validateAssetFieldsAsync(projectRoot, exp) {\n  try {\n    const assetSchemas = await ExpSchema.getAssetSchemasAsync(exp.sdkVersion);\n    await Promise.all(\n      assetSchemas.map(async ({\n        fieldPath,\n        schema: { meta: { asset, contentTypePattern, contentTypeHuman } },\n      }) => {\n        const value = _.get(exp, fieldPath);\n        if (asset && value) {\n          if (contentTypePattern) {\n            // NOTE(nikki): The '4100' below should be enough for most file types, though we\n            //              could probably go shorter....\n            //              http://www.garykessler.net/library/file_sigs.html\n            const filePath = path.resolve(projectRoot, value);\n            const contentType = fs.existsSync(filePath)\n              ? fileType(await readChunk(filePath, 0, 4100)).mime\n              : (await request.promise.head({ url: value })).headers[\n                  'content-type'\n                ];\n            if (!contentType.match(new RegExp(contentTypePattern))) {\n              const configName = await ProjectUtils.configFilenameAsync(\n                projectRoot\n              );\n              ProjectUtils.logWarning(\n                projectRoot,\n                'expo',\n                `Warning: Problem in ${configName}. Field '${fieldPath}' should point to a ${contentTypeHuman}, but the file at '${value}' has type '${contentType}'. See ${Config.helpUrl}`,\n                `doctor-validate-asset-fields-${fieldPath}`\n              );\n            } else {\n              ProjectUtils.clearNotification(\n                projectRoot,\n                `doctor-validate-asset-fields-${fieldPath}`\n              );\n            }\n          }\n        }\n      })\n    );\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-validate-asset-fields');\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expon',\n      `Warning: Problem validating asset fields: ${e.message}.`,\n      'doctor-validate-asset-fields'\n    );\n  }\n}\n\nasync function _validatePackageJsonAndExpJsonAsync(\n  exp,\n  pkg,\n  projectRoot\n): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-problem-checking-watchman-version'\n  );\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'exp.json')\n  );\n  const appJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'app.json')\n  );\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  try {\n    // TODO(perry) figure out a way to tell the schema validator whether this is exp.json or app.json\n    let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n    let validator = new jsonschema.Validator();\n    let validationResult = validator.validate(exp, schema);\n    if (validationResult.errors && validationResult.errors.length > 0) {\n      let fullMessage = `Warning: Problem${validationResult.errors.length > 1 ? 's' : ''} in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n\n      for (let error of validationResult.errors) {\n        // Formate the message nicely\n        let message = error.stack\n          .replace(/instance\\./g, '')\n          .replace(/exists in instance/g, `exists in ${configName}`)\n          .replace('instance additionalProperty', 'additional property');\n        fullMessage += `\\n  - ${message}.`;\n      }\n\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        fullMessage,\n        'doctor-schema-validation'\n      );\n      return WARNING;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-schema-validation-exception'\n    );\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem validating ${configName}: ${e.message}.`,\n      'doctor-schema-validation-exception'\n    );\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED') {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Can't find react-native in package.json dependencies`,\n      'doctor-no-react-native-in-package-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-no-react-native-in-package-json'\n  );\n\n  // TODO(adam) set up caching for this\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-versions-endpoint-failed'\n  );\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // Expo fork of react-native is required\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/(exponent(?:js)?|expo)\\/react-native/)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(\n          Versions.parseSdkVersionFromTag(\n            sdkVersionObject['expoReactNativeTag']\n          )\n        )\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:exponent/react-native#${sdkVersionObject['expoReactNativeTag']}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-invalid-version-of-react-native'\n      );\n\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-malformed-version-of-react-native'\n      );\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(\n      path.join(\n        nodeModulesPath,\n        'node_modules',\n        'react-native',\n        'local-cli',\n        'cli.js'\n      )\n    );\n    if (!result.isFile()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-react-native-not-installed'\n    );\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`,\n        'doctor-npm-not-found'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync(\n        'npm',\n        ['ls', '--json', '--depth', '1'],\n        {\n          cwd: nodeModulesPath,\n        }\n      );\n      npmls = npmlsCommand.stdout;\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`,\n        'doctor-could-not-run-npm-ls'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies: ${e.message}`,\n        'doctor-problem-checking-node-modules'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-problem-checking-node-modules'\n    );\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (dependency === 'react' && versionRequired.match(/alpha/)) {\n          // ignore alpha dependencies on react\n        } else if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(\n              `Warning: '${dependency}' peer depencency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`\n            );\n          } else {\n            errorStrings.push(\n              `Warning: '${dependency}' dependency is not installed.`\n            );\n          }\n        } else if (\n          dependency !== 'react-native' &&\n          !semver.satisfies(installedDependency.version, versionRequired) &&\n          !versionRequired.includes(installedDependency.from)\n        ) {\n          // TODO: also check react-native\n          // For react native, `from` field looks like \"exponent/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:exponent/react-native#sdk-8.0.0\"\n          errorStrings.push(\n            `Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`\n          );\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(\n          `\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`\n        );\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          errorStrings.join('\\n'),\n          'doctor-node-modules-issues'\n        );\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(\n          projectRoot,\n          'doctor-node-modules-issues'\n        );\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean\n): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let status = await _validatePackageJsonAndExpJsonAsync(exp, pkg, projectRoot);\n\n  // Don't block this! It has to make network requests so it's slow.\n  if (allowNetwork) {\n    _validateAssetFieldsAsync(projectRoot, exp);\n  }\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<number> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile.promise(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (\n      mainFile.includes(`from '${sdkPkg}'`) ||\n      mainFile.includes(`require('${sdkPkg}')`)\n    ) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}