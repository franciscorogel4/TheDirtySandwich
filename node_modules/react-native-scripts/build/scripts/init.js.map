{"version":3,"sources":["init.js"],"names":["DEFAULT_DEPENDENCIES","expo","react","DEFAULT_DEV_DEPENDENCIES","module","exports","appPath","appName","verbose","cwd","ownPackageName","require","name","ownPath","join","useYarn","readmeExists","rename","appPackagePath","JSON","readFile","appPackage","parse","main","scripts","start","eject","android","ios","test","jest","preset","dependencies","devDependencies","writeFile","copy","code","data","appendFile","unlink","command","args","push","proc","stdio","on","console","error","cdpath","resolve","cyan","yellow"],"mappings":"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","file":"init.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fsp from 'fs-promise';\nimport path from 'path';\nimport pathExists from 'path-exists';\nimport spawn from 'cross-spawn';\nimport log from '../util/log';\n\n// UPDATE DEPENDENCY VERSIONS HERE\nconst DEFAULT_DEPENDENCIES = {\n  expo: '^16.0.0',\n  react: '16.0.0-alpha.6',\n  'react-native': '^0.43.4',\n};\n\n// TODO figure out how this interacts with ejection\nconst DEFAULT_DEV_DEPENDENCIES = {\n  'jest-expo': '^0.4.0',\n  'react-test-renderer': '16.0.0-alpha.6',\n};\n\nmodule.exports = async (appPath: string, appName: string, verbose: boolean, cwd: string = '') => {\n  const ownPackageName: string = require('../../package.json').name;\n  const ownPath: string = path.join(appPath, 'node_modules', ownPackageName);\n  const useYarn: boolean = await pathExists(path.join(appPath, 'yarn.lock'));\n\n  const readmeExists: boolean = await pathExists(path.join(appPath, 'README.md'));\n  if (readmeExists) {\n    await fsp.rename(path.join(appPath, 'README.md'), path.join(appPath, 'README.old.md'));\n  }\n\n  const appPackagePath: string = path.join(appPath, 'package.json');\n  const appPackage = JSON.parse(await fsp.readFile(appPackagePath));\n\n  // mutate the default package.json in any ways we need to\n  appPackage.main = './node_modules/react-native-scripts/build/bin/crna-entry.js';\n  appPackage.scripts = {\n    start: 'react-native-scripts start',\n    eject: 'react-native-scripts eject',\n    android: 'react-native-scripts android',\n    ios: 'react-native-scripts ios',\n    test: 'node node_modules/jest/bin/jest.js --watch',\n  };\n\n  appPackage.jest = {\n    preset: 'jest-expo',\n  };\n\n  if (!appPackage.dependencies) {\n    appPackage.dependencies = {};\n  }\n\n  if (!appPackage.devDependencies) {\n    appPackage.devDependencies = {};\n  }\n\n  // react-native-scripts is already in the package.json devDependencies\n  // so we need to merge instead of assigning\n  Object.assign(appPackage.dependencies, DEFAULT_DEPENDENCIES);\n  Object.assign(appPackage.devDependencies, DEFAULT_DEV_DEPENDENCIES);\n\n  // Write the new appPackage after copying so that we can include any existing\n  await fsp.writeFile(appPackagePath, JSON.stringify(appPackage, null, 2));\n\n  // Copy the files for the user\n  await fsp.copy(path.join(ownPath, 'template'), appPath);\n\n  // Rename gitignore after the fact to prevent npm from renaming it to .npmignore\n  try {\n    await fsp.rename(path.join(appPath, 'gitignore'), path.join(appPath, '.gitignore'));\n  } catch (err) {\n    // Append if there's already a `.gitignore` file there\n    if (err.code === 'EEXIST') {\n      const data = await fsp.readFile(path.join(appPath, 'gitignore'));\n      await fsp.appendFile(path.join(appPath, '.gitignore'), data);\n      await fsp.unlink(path.join(appPath, 'gitignore'));\n    } else {\n      throw err;\n    }\n  }\n\n  // Run yarn or npm\n  let command = '';\n  let args = [];\n\n  if (useYarn) {\n    command = 'yarnpkg';\n  } else {\n    command = 'npm';\n    args = ['install', '--save'];\n\n    if (verbose) {\n      args.push('--verbose');\n    }\n  }\n\n  log(`Installing dependencies using ${command}...`);\n  log(); // why is this here\n\n  if (command === 'yarnpkg') {\n    // it's weird to print a yarn alias that no one uses\n    command = 'yarn';\n  }\n\n  const proc = spawn(command, args, { stdio: 'inherit' });\n  proc.on('close', code => {\n    if (code !== 0) {\n      console.error(`\\`${command} ${args.join(' ')}\\` failed`);\n      return;\n    }\n\n    // display the cleanest way to get to the app dir\n    // if the cwd + appName is equal to the full path, then just cd into appName\n    let cdpath;\n    if (path.resolve(cwd, appName) === appPath) {\n      cdpath = appName;\n    } else {\n      cdpath = appPath;\n    }\n\n    log(\n      `\n\nSuccess! Created ${appName} at ${appPath}\nInside that directory, you can run several commands:\n\n  ${chalk.cyan(command + ' start')}\n    Starts the development server so you can open your app in the Expo\n    app on your phone.\n\n  ${chalk.cyan(command + ' run ios')}\n    (Mac only, requires Xcode)\n    Starts the development server and loads your app in an iOS simulator.\n\n  ${chalk.cyan(command + ' run android')}\n    (Requires Android build tools)\n    Starts the development server and loads your app on a connected Android\n    device or emulator.\n\n  ${chalk.cyan(command + ' test')}\n    Starts the test runner.\n\n  ${chalk.cyan(command + ' run eject')}\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you canâ€™t go back!\n\nWe suggest that you begin by typing:\n\n  ${chalk.cyan('cd ' + cdpath)}\n  ${chalk.cyan(command + ' start')}`\n    );\n\n    if (readmeExists) {\n      log(\n        `\n${chalk.yellow('You had a `README.md` file, we renamed it to `README.old.md`')}`\n      );\n    }\n\n    log();\n    log('Happy hacking!');\n  });\n};\n"]}