{"version":3,"sources":["Credentials.js"],"names":["async","username","experienceName","bundleIdentifier","platform","err","credentials","await","Api","callMethodAsync","decrypt","Error","credentialsExistForPlatformAsync","newCredentials","metadata","updateCredentialsForPlatform","removeCredentialsForPlatform","validationType","isValid","error","errorCode","errorMessage","validateCredentialsForPlatform","success","fetchAppleCertificates","ensureAppId","result","fetchPushCertificates"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport Api from './Api';\nimport XDLError from './XDLError';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n};\n\nexport type Credentials = IOSCredentials & AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string,\n};\n\nexport async function credentialsExistForPlatformAsync({\n  username,\n  experienceName,\n  bundleIdentifier,\n  platform,\n}: CredentialMetadata): Promise<?Credentials> {\n  const { err, credentials } = await Api.callMethodAsync(\n    'getCredentials',\n    [],\n    'post',\n    {\n      username,\n      experienceName,\n      bundleIdentifier,\n      platform,\n      decrypt: false,\n    }\n  );\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync(\n    'updateCredentials',\n    [],\n    'post',\n    {\n      credentials: newCredentials,\n      platform,\n      ...metadata,\n    }\n  );\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n\n  return;\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n\n  return;\n}\n\nexport async function validateCredentialsForPlatform(\n  platform: string,\n  validationType: string,\n  credentials: ?Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const {\n    isValid,\n    error,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('validateCredentials', [], 'post', {\n    credentials,\n    platform,\n    validationType,\n    ...metadata,\n  });\n\n  if (!isValid || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to validate credentials: ${errorMessage}`\n    );\n  }\n\n  return;\n}\n\nexport async function fetchAppleCertificates(\n  metadata: CredentialMetadata\n): Promise<void> {\n  const {\n    err,\n    success,\n    error,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('fetchAppleCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to fetch distribution certificate: ${errorMessage}`\n    );\n  }\n\n  return success;\n}\n\nexport async function ensureAppId(metadata: CredentialMetadata): Promise<void> {\n  const {\n    err,\n    success,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('ensureAppId', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success) {\n    throw new XDLError(errorCode, `Unable to create app id: ${errorMessage}`);\n  }\n\n  return success;\n}\n\nexport async function fetchPushCertificates(\n  metadata: CredentialMetadata\n): Promise<void> {\n  const result = await Api.callMethodAsync(\n    'fetchPushCertificates',\n    [],\n    'post',\n    {\n      ...metadata,\n    }\n  );\n\n  if (result.err || !result.success) {\n    throw new XDLError(\n      result.errorCode,\n      `Unable to fetch push certificate: ${result.errorMessage}`\n    );\n  }\n\n  return result.success;\n}\n"],"sourceRoot":"/xdl/src"}