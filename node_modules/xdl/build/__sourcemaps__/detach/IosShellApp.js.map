{"version":3,"sources":["detach/IosShellApp.js"],"names":["async","args","iosDir","privateConfigFile","spawnAsyncThrowError","path","join","configureShellAppSecretsAsync","configFilePath","manifest","privateConfig","bundleIdentifier","let","result","await","modifyIOSPropertyListAsync","config","ios","infoPlist","extraConfig","key","hasOwnProperty","CFBundleIdentifier","Error","CFBundleName","name","linkingSchemes","scheme","facebookScheme","startsWith","push","googleSignIn","reservedClientId","CFBundleURLTypes","CFBundleURLSchemes","CFBundleURLName","usesNonExemptEncryption","ITSAppUsesNonExemptEncryption","googleMapsApiKey","GMSApiKey","EXClientVersion","CFBundleVersion","version","buildNumber","CFBundleShortVersionString","Fabric","APIKey","fabric","apiKey","DEFAULT_FABRIC_KEY","Kits","KitInfo","KitName","permissionsAppName","indexOf","replace","UIDeviceFamily","supportsTablet","configureStandaloneIOSInfoPlistAsync","manifestUrl","shellConfig","isShell","permissions","isDetached","isManifestVerificationBypassed","isRemoteJSEnabled","console","log","configureStandaloneIOSShellPlistAsync","validateConfigArguments","privateConfigContents","fs","promise","readFile","JSON","parse","url","UILaunchStoryboardName","configurePropertyListsAsync","bundleUrl","writeFile","stringify","saveUrlToPathAsync","preloadManifestAndBundleAsync","restoreOriginals","cleanIOSPropertyListBackupAsync","cleanPropertyListBackupsAsync","iOSRootPath","relativeBuildDestination","action","configuration","verbose","type","buildCmd","buildDest","pathToApp","stdio","cwd","shell","artifactLocation","buildAsync","validateArgs","sdkVersion","output","getManifestAsync","archivePath","configureIOSIconsAsync","archiveName","spawnAsync","createIOSShellAppAsync","cmdArgs","bundleIdentifierFromManifest","warn"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport 'instapromise';\n\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  getManifestAsync,\n  saveUrlToPathAsync,\n  spawnAsync,\n  spawnAsyncThrowError,\n  modifyIOSPropertyListAsync,\n  cleanIOSPropertyListBackupAsync,\n  configureIOSIconsAsync,\n} from './ExponentTools';\n\n// TODO: move this somewhere else. this is duplicated in universe/exponent/template-files/keys,\n// but xdl doesn't have access to that.\nconst DEFAULT_FABRIC_KEY = '81130e95ea13cd7ed9a4f455e96214902c721c99';\n\nfunction validateConfigArguments(manifest, cmdArgs, configFilePath) {\n  if (!configFilePath) {\n    throw new Error('No path to config files provided');\n  }\n  let bundleIdentifierFromManifest = manifest.ios\n    ? manifest.ios.bundleIdentifier\n    : null;\n  if (!bundleIdentifierFromManifest && !cmdArgs.bundleIdentifier) {\n    throw new Error(\n      'No bundle identifier found in either the manifest or argv'\n    );\n  }\n  if (!manifest.name) {\n    throw new Error('Manifest does not have a name');\n  }\n\n  if (!cmdArgs.privateConfigFile) {\n    console.warn('Warning: No config file specified.');\n  }\n  return true;\n}\n\n/**\n * Writes Fabric config to private-shell-app-config.json if necessary. Used by\n * generate-dynamic-macros when building.\n */\nasync function configureShellAppSecretsAsync(args, iosDir) {\n  if (!args.privateConfigFile) {\n    return;\n  }\n\n  spawnAsyncThrowError('/bin/cp', [\n    args.privateConfigFile,\n    path.join(iosDir, 'private-shell-app-config.json'),\n  ]);\n}\n\n/**\n * Configure an iOS Info.plist for a standalone app given its exponent configuration.\n * @param configFilePath Path to Info.plist\n * @param manifest the app's manifest\n * @param privateConfig optional config with the app's private keys\n * @param bundleIdentifier optional bundle id if the manifest doesn't contain one already\n */\nasync function configureStandaloneIOSInfoPlistAsync(\n  configFilePath,\n  manifest,\n  privateConfig = null,\n  bundleIdentifier = null\n) {\n  let result = await modifyIOSPropertyListAsync(\n    configFilePath,\n    'Info',\n    config => {\n      // make sure this happens first:\n      // apply any custom information from ios.infoPlist prior to all other exponent config\n      if (manifest.ios && manifest.ios.infoPlist) {\n        let extraConfig = manifest.ios.infoPlist;\n        for (let key in extraConfig) {\n          if (extraConfig.hasOwnProperty(key)) {\n            config[key] = extraConfig[key];\n          }\n        }\n      }\n\n      // bundle id\n      config.CFBundleIdentifier = manifest.ios && manifest.ios.bundleIdentifier\n        ? manifest.ios.bundleIdentifier\n        : bundleIdentifier;\n      if (!config.CFBundleIdentifier) {\n        throw new Error(\n          `Cannot configure an iOS app with no bundle identifier.`\n        );\n      }\n\n      // app name\n      config.CFBundleName = manifest.name;\n\n      // determine app linking schemes\n      let linkingSchemes = manifest.scheme ? [manifest.scheme] : [];\n      if (manifest.facebookScheme && manifest.facebookScheme.startsWith('fb')) {\n        linkingSchemes.push(manifest.facebookScheme);\n      }\n      if (\n        privateConfig &&\n        privateConfig.googleSignIn &&\n        privateConfig.googleSignIn.reservedClientId\n      ) {\n        linkingSchemes.push(privateConfig.googleSignIn.reservedClientId);\n      }\n\n      // remove exp scheme, add app scheme(s)\n      config.CFBundleURLTypes = [\n        {\n          CFBundleURLSchemes: linkingSchemes,\n        },\n        {\n          // Add the generic oauth redirect, it's important that it has the name\n          // 'OAuthRedirect' so we can find it in app code.\n          CFBundleURLName: 'OAuthRedirect',\n          CFBundleURLSchemes: [config.CFBundleIdentifier],\n        },\n      ];\n\n      // set ITSAppUsesNonExemptEncryption to let people skip manually\n      // entering it in iTunes Connect\n      if (\n        privateConfig &&\n        privateConfig.hasOwnProperty('usesNonExemptEncryption') &&\n        privateConfig.usesNonExemptEncryption === false\n      ) {\n        config.ITSAppUsesNonExemptEncryption = false;\n      }\n\n      // google maps api key\n      if (privateConfig && privateConfig.googleMapsApiKey) {\n        config.GMSApiKey = privateConfig.googleMapsApiKey;\n      }\n\n      // permanently save the exponent client version at time of configuration\n      config.EXClientVersion = config.CFBundleVersion;\n\n      // use version from manifest\n      let version = manifest.version ? manifest.version : '0.0.0';\n      let buildNumber = manifest.ios && manifest.ios.buildNumber\n        ? manifest.ios.buildNumber\n        : '1';\n      config.CFBundleShortVersionString = version;\n      config.CFBundleVersion = buildNumber;\n\n      config.Fabric = {\n        APIKey: (privateConfig &&\n          privateConfig.fabric &&\n          privateConfig.fabric.apiKey) ||\n          DEFAULT_FABRIC_KEY,\n        Kits: [\n          {\n            KitInfo: {},\n            KitName: 'Crashlytics',\n          },\n        ],\n      };\n\n      let permissionsAppName = manifest.name ? manifest.name : 'this app';\n      for (let key in config) {\n        if (\n          config.hasOwnProperty(key) && key.indexOf('UsageDescription') !== -1\n        ) {\n          config[key] = config[key].replace(\n            'Expo experiences',\n            permissionsAppName\n          );\n        }\n      }\n\n      // 1 is iPhone, 2 is iPad\n      config.UIDeviceFamily = manifest.ios && manifest.ios.supportsTablet\n        ? [1, 2]\n        : [1];\n\n      return config;\n    }\n  );\n  return result;\n}\n\n/**\n * Configure EXShell.plist for a standalone app given its exponent configuration.\n * @param configFilePath Path to Info.plist\n * @param manifest the app's manifest\n * @param manifestUrl the app's manifest url\n */\nasync function configureStandaloneIOSShellPlistAsync(\n  configFilePath,\n  manifest,\n  manifestUrl\n) {\n  await modifyIOSPropertyListAsync(configFilePath, 'EXShell', shellConfig => {\n    shellConfig.isShell = true;\n    shellConfig.manifestUrl = manifestUrl;\n    if (manifest.ios && manifest.ios.permissions) {\n      shellConfig.permissions = manifest.ios.permissions;\n    }\n    if (manifest.isDetached) {\n      // disable manifest verification on detached apps until\n      // the developer adds the correct entitlements to their bundle id.\n      shellConfig.isManifestVerificationBypassed = true;\n    }\n    if (manifest.ios && manifest.ios.hasOwnProperty('isRemoteJSEnabled')) {\n      // enable/disable code push if the developer provided specific behavior\n      shellConfig.isRemoteJSEnabled = manifest.ios.isRemoteJSEnabled;\n    }\n\n    console.log('Using shell config:', shellConfig);\n    return shellConfig;\n  });\n}\n\nasync function configurePropertyListsAsync(manifest, args, configFilePath) {\n  // make sure we have all the required info\n  validateConfigArguments(manifest, args, configFilePath);\n  console.log(`Modifying config files under ${configFilePath}...`);\n\n  let { privateConfigFile } = args;\n\n  let privateConfig;\n  if (privateConfigFile) {\n    let privateConfigContents = await fs.promise.readFile(\n      privateConfigFile,\n      'utf8'\n    );\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  // generate new shell config\n  await configureStandaloneIOSShellPlistAsync(\n    configFilePath,\n    manifest,\n    args.url\n  );\n\n  // Info.plist changes specific to turtle\n  await modifyIOSPropertyListAsync(configFilePath, 'Info', config => {\n    // use shell-specific launch screen\n    config.UILaunchStoryboardName = 'LaunchScreenShell';\n    return config;\n  });\n\n  // common standalone Info.plist config changes\n  await configureStandaloneIOSInfoPlistAsync(\n    configFilePath,\n    manifest,\n    privateConfig,\n    args.bundleIdentifier\n  );\n}\n\n/**\n * Write the manifest and JS bundle to the iOS NSBundle.\n */\nasync function preloadManifestAndBundleAsync(manifest, args, configFilePath) {\n  let bundleUrl = manifest.bundleUrl;\n  await fs.promise.writeFile(\n    `${configFilePath}/shell-app-manifest.json`,\n    JSON.stringify(manifest)\n  );\n  await saveUrlToPathAsync(bundleUrl, `${configFilePath}/shell-app.bundle`);\n  return;\n}\n\nasync function cleanPropertyListBackupsAsync(configFilePath, restoreOriginals) {\n  console.log('Cleaning up...');\n  await cleanIOSPropertyListBackupAsync(\n    configFilePath,\n    'EXShell',\n    restoreOriginals\n  );\n  await cleanIOSPropertyListBackupAsync(\n    configFilePath,\n    'Info',\n    restoreOriginals\n  );\n}\n\n/**\n *  Build the iOS binary from source.\n *  @return the path to the resulting .app\n */\nasync function buildAsync(args, iOSRootPath, relativeBuildDestination) {\n  let { action, configuration, verbose, type } = args;\n\n  let buildCmd, buildDest, pathToApp;\n  if (type === 'simulator') {\n    buildDest = `${iOSRootPath}/${relativeBuildDestination}-simulator`;\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent -sdk iphonesimulator -configuration ${configuration} -arch i386 -derivedDataPath ${buildDest} CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO SKIP_INSTALL=NO | xcpretty`;\n    pathToApp = `${buildDest}/Build/Products/${configuration}-iphonesimulator/Exponent.app`;\n  } else if (type === 'archive') {\n    buildDest = `${iOSRootPath}/${relativeBuildDestination}-archive`;\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent archive -configuration ${configuration} -derivedDataPath ${buildDest} -archivePath ${buildDest}/Exponent.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO SKIP_INSTALL=NO | xcpretty`;\n    pathToApp = `${buildDest}/Exponent.xcarchive/Products/Applications/Exponent.app`;\n  }\n\n  if (buildCmd) {\n    console.log(\n      `Building shell app under ${iOSRootPath}/${relativeBuildDestination}`\n    );\n    console.log(`  (action: ${action}, configuration: ${configuration})...`);\n    console.log(buildCmd);\n    await spawnAsyncThrowError(buildCmd, null, {\n      // only stderr\n      stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n      cwd: iOSRootPath,\n      shell: true,\n    });\n\n    let artifactLocation = `${iOSRootPath}/../shellAppBase-builds/${type}/${configuration}/`;\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactLocation]);\n    await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactLocation]);\n\n    if (type === 'archive') {\n      await spawnAsyncThrowError('/bin/cp', [\n        '-R',\n        `${buildDest}/Exponent.xcarchive`,\n        artifactLocation,\n      ]);\n    } else if (type === 'simulator') {\n      await spawnAsyncThrowError('/bin/cp', [\n        '-R',\n        pathToApp,\n        artifactLocation,\n      ]);\n    }\n  }\n  return pathToApp;\n}\n\nfunction validateArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(\n          `Unsupported build configuration ${args.configuration}`\n        );\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error(\n          'Release is the only supported configuration when archiving'\n        );\n      }\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\n/**\n*  @param url manifest url for shell experience\n*  @param sdkVersion sdk to use when requesting the manifest\n*  @param action\n*    build - build a binary\n*    configure - don't build anything, just configure the files in an existing .app bundle\n*  @param type simulator or archive, for action == build\n*  @param configuration Debug or Release, for type == simulator (default Release)\n*  @param archivePath path to existing bundle, for action == configure\n*  @param privateConfigFile path to a private config file containing, e.g., private api keys\n*  @param bundleIdentifier iOS CFBundleIdentifier to use in the bundle config\n*  @param verbose show all xcodebuild output (default false)\n*/\nasync function createIOSShellAppAsync(args) {\n  let configFilePath;\n  args = validateArgs(args);\n\n  if (args.action !== 'configure') {\n    // build the app before configuring\n    await configureShellAppSecretsAsync(args, '../ios');\n    configFilePath = await buildAsync(args, '../ios', '../shellAppBase');\n  } else {\n    let { url, sdkVersion, output, type } = args;\n\n    // fetch manifest\n    let manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n    });\n\n    // action === 'configure'\n    configFilePath = args.archivePath;\n    // just configure, don't build anything\n    await configurePropertyListsAsync(manifest, args, configFilePath);\n    await configureIOSIconsAsync(manifest, configFilePath);\n    await preloadManifestAndBundleAsync(manifest, args, configFilePath);\n    await cleanPropertyListBackupsAsync(configFilePath, false);\n\n    let archiveName = manifest.name.replace(/\\s+/g, '');\n    if (type === 'simulator') {\n      await spawnAsync(\n        `mv Exponent.app ${archiveName}.app && tar cvf ${output} ${archiveName}.app`,\n        null,\n        {\n          stdio: 'inherit',\n          cwd: `${configFilePath}/..`,\n          shell: true,\n        }\n      );\n    } else if (type === 'archive') {\n      await spawnAsync('/bin/mv', ['Exponent.xcarchive', output], {\n        stdio: 'inherit',\n        cwd: `${configFilePath}/../../../..`,\n      });\n    }\n  }\n\n  return;\n}\n\nexport {\n  createIOSShellAppAsync,\n  configureStandaloneIOSInfoPlistAsync,\n  configureStandaloneIOSShellPlistAsync,\n};\n"],"sourceRoot":"/xdl/src"}